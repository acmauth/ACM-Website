name: Link Existing Issues to Project

on:
  workflow_dispatch:

jobs:
  link-issues-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate GitHub CLI
        run: |
          gh auth login --with-token <<< ${{ secrets.GITHUB_TOKEN }}

      - name: Link Existing Issues to Project
        run: |
          issues=(
            "Project Planning: Conduct Brainstorming Session: Website Vision & Feature List"
            "Project Planning: Review Current WordPress Website Structure & Content"
            "Project Planning: Collect Feature Requests & Content Needs from ACM AUTH Members"
            "Project Planning: Define User Roles & Permissions"
            "Project Planning: Decide Content Management Approach (Custom CMS or Headless CMS)"
            "Project Planning: Define Social Media Integration Requirements"
            "Project Planning: Choose Technology Stack (Backend, Frontend, Database, Hosting)"
            "Design & Architecture: Design System Architecture (Pages, APIs, Database)"
            "Design & Architecture: Create Wireframes for Main Pages"
            "Design & Architecture: Review & Validate UI/UX Mockups with ACM AUTH Members"
            "Design & Architecture: Define Color Scheme, Fonts, and Branding"
            "Development: Set Up Backend Framework & Initial Project Structure"
            "Development: Set Up Frontend Framework & Initial Project Structure"
            "Development: Implement Public Website Pages (Home, About, Events, Blog, Contact)"
            "Development: Develop Admin Dashboard for Content Management"
            "Development: Implement Authentication & Role-Based Access"
            "Development: Build REST/GraphQL APIs"
            "Development: Integrate Social Media API Content Fetching"
            "Development: Implement Auto-Post Creation from Social Media Data"
            "Development: Migrate Content from WordPress Website"
            "Development: Set Up Database Schema & Migrations"
            "Infrastructure & Deployment: Configure Web Server & Hosting Environment"
            "Infrastructure & Deployment: Set Up CI/CD Pipeline for Deployment"
            "Infrastructure & Deployment: Purchase/Configure Domain & SSL Certificates"
            "Infrastructure & Deployment: Set Up Monitoring & Error Tracking"
            "Infrastructure & Deployment: Define Backup Policy for Content & Database"
            "Testing & Documentation: Define Testing Strategy (Unit, Integration, E2E)"
            "Testing & Documentation: Write Test Cases for Core Features"
            "Testing & Documentation: Test Social Media Synchronization Workflow"
            "Testing & Documentation: Conduct User Acceptance Testing"
            "Testing & Documentation: Write Project README & Setup Instructions"
            "Testing & Documentation: Document Content Editing & Management Guidelines"
            "Testing & Documentation: Create Contributor Guidelines & Code of Conduct"
            "Advanced Features: Members Area with Profiles & Achievements"
            "Advanced Features: Event Registration System"
            "Advanced Features: Newsletter Subscription System"
            "Advanced Features: Gamification Features (Badges, Points)"
            "Advanced Features: Job Board / Project Board"
            "Feedback & Maintenance: Prepare Maintenance & Update Plan"
            "Feedback & Maintenance: Collect Community Feedback for Future Improvements"
          )

          project_name="Team Website"

          # Loop through the list of issues and link them to the project
          for issue_title in "${issues[@]}"; do
            # Get the issue number based on its title
            issue_number=$(gh issue list --search "$issue_title" --json number -q ".[0].number")

            # Link the issue to the project using item-add
            gh project item-add "$project_name" --item-type issue --item-id "$issue_number"
          done
